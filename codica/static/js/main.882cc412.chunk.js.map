{"version":3,"sources":["API_handler.js","store/citySlice.js","CityList.js","SearchCity.js","App.js","reportWebVitals.js","store/index.js","index.js"],"names":["sendRequest","filter","a","params","appid","units","query","querystring","stringify","fetch","then","response","ok","json","Error","statusText","citySlice","createSlice","name","initialState","allCity","cards","reducers","add","state","data","push","payload","id","localStorage","setItem","JSON","actions","selectCity2","Object","values","city","useStyles","makeStyles","root","maxWidth","margin","bullet","display","transform","title","fontSize","pos","marginBottom","size","width","height","marginLeft","CityList","classes","myCity","useSelector","dispatch","useDispatch","handleClickUpdate","weatherUpdate","getImageSrc","weather","useEffect","getItem","parsedData","parse","entries","forEach","console","log","Container","Grid","container","item","md","xs","direction","justify","map","Card","className","variant","CardContent","Typography","color","gutterBottom","component","main","temp","pressure","humidity","wind","speed","src","alt","CardActions","Button","onClick","SearchCity","ref1","React","createRef","cityName","current","value","q","warn","type","ref","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.882cc412.chunk.js","sourcesContent":["import querystring from 'querystring';\r\n\r\nexport const sendRequest = async (filter) => { \r\n        const params = {\r\n            ...filter,\r\n            appid: \"e611b57740c7239015cf25c64b257769\",\r\n            units: 'metric'\r\n        }\r\n\r\n        const query = querystring.stringify(params); \r\n\r\n        return fetch(`https://api.openweathermap.org/data/2.5/weather?${query}`)\r\n        .then(response => {                     \r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n\r\n            throw new Error(response.statusText);\r\n        })\r\n} \r\n            ","import {createSlice} from '@reduxjs/toolkit';\r\n\r\nexport const citySlice = createSlice({\r\n    name : 'city',\r\n    initialState : {\r\n        allCity : [],\r\n        cards: {}\r\n    },\r\n    reducers : {        \r\n        add: (state, data) => {   \r\n           state.allCity.push(data.payload);\r\n\r\n           state.cards[data.payload.id] = data.payload;\r\n           localStorage.setItem('cards', JSON.stringify(state.cards))\r\n        }\r\n    }\r\n});\r\n\r\nexport const { add } = citySlice.actions;\r\nexport const selectCity = state => state.city.allCity;  \r\nexport const selectCity2 = state => Object.values(state.city.cards);  \r\nexport default citySlice.reducer;\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Grid, Container } from '@material-ui/core';\r\nimport {sendRequest} from './API_handler';\r\n\r\nimport {\r\n    selectCity2\r\n} from './store/citySlice';\r\n\r\nimport { \r\n    add \r\n} from './store/citySlice';\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n      maxWidth: 225,\r\n      margin: 20\r\n    },\r\n    bullet: {\r\n      display: 'inline-block',\r\n      margin: '0 2px',\r\n      transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n      fontSize: 14,\r\n    },\r\n    pos: {\r\n      marginBottom: 12,\r\n    },\r\n    size: {\r\n        width: 40,\r\n        height: 40,\r\n        marginLeft: 10\r\n    }\r\n}));\r\n\r\nfunction CityList() {\r\n    const classes = useStyles();\r\n    const myCity = useSelector(selectCity2);   \r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=>{\r\n        const data = localStorage.getItem('cards');\r\n        if (data) {\r\n            let parsedData = JSON.parse(data);\r\n            Object.entries(parsedData).forEach( ([id, weather]) => {\r\n                handleClickUpdate(id);\r\n                dispatch(add(weather)) \r\n            })\r\n            console.log(\"Object.values(parsedData ===>\" , Object.values(parsedData));\r\n        }\r\n      }, []);\r\n      \r\n    async function handleClickUpdate (id) {\r\n        const weatherUpdate = await sendRequest({ id });\r\n        dispatch(add(weatherUpdate));\r\n    }\r\n    \r\n    function getImageSrc(weather) {\r\n        switch(weather) {\r\n            case 'Clouds':\r\n                return 'img/cloud.png';\r\n            case 'Sun':\r\n                return 'img/sun.png';\r\n            case \"Rain\":\r\n                return \"img/rain.png\";\r\n            case \"Snow\":\r\n                return \"img/snow.png\";\r\n            default:\r\n                return \"img/sun_and_cloud.png\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Container maxWidth=\"lm\" > \r\n            <Grid container > \r\n                <Grid item md={12} container xs={8} direction=\"row\" justify=\"flex-start\"> \r\n                {myCity.map(item => <Card key={item.name} className={classes.root} variant=\"outlined\">\r\n                    <CardContent>\r\n                        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                        Name: {item.name}<br/>\r\n                        </Typography>\r\n\r\n                        <Typography variant=\"h6\" component=\"h2\">\r\n                        Temperature: {item.main.temp}&deg;<br/>\r\n                        </Typography>\r\n\r\n                        <Typography className={classes.pos} color=\"textSecondary\">\r\n                        Pressure: {item.main.pressure}<br/>\r\n                        </Typography>\r\n\r\n                        <Typography variant=\"body1\" component=\"p\">\r\n                        Humidity: {item.main.humidity}<br/>\r\n                        <br />\r\n                        </Typography>\r\n\r\n                        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                        Speed of wind: {item.wind.speed}<br/>\r\n                        </Typography>\r\n\r\n                        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                        Description: \r\n                        <img src={getImageSrc(item.weather[0]['main'])}  className={classes.size} alt={item.weather[0]['main']} />\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <CardActions>\r\n                        <Button size=\"small\" color=\"secondary\" onClick={() => {handleClickUpdate(item.id)}}>Button</Button>\r\n                    </CardActions>\r\n                </Card>\r\n                )}\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CityList;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useDispatch } from 'react-redux';\r\nimport {sendRequest} from './API_handler'\r\n\r\nimport { \r\n  add \r\n} from './store/citySlice';\r\n\r\n\r\nfunction SearchCity() {\r\n    let ref1 = React.createRef();\r\n    const dispatch = useDispatch();\r\n    \r\n    async function handleClick() {\r\n        let cityName = ref1.current.value;\r\n\r\n        try {\r\n          const weather = await sendRequest({q:cityName});\r\n\r\n          dispatch(add(weather))\r\n        } catch(error) {  \r\n          console.warn('error ===>', error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n           <div className='text'>\r\n              This application was created using React and Redux technology. If you want to get a weather forecast for any city\r\n              in the world at the current time, then you need to enter the name of the city in English in the input\r\n              field, and then press the OK button and you will receive a card containing information about the weather\r\n              in the city you have chosen. If you click on the button on the card after a while, you will get\r\n              an updated weather forecast.\r\n            </div>\r\n            <input type=\"text\" className='input' ref={ref1} />\r\n            <Button variant=\"contained\" color=\"primary\" onClick={handleClick}>OK </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchCity;","import './App.css';\nimport React from 'react';\nimport CityList from './CityList';\nimport SearchCity from './SearchCity';\n\nfunction App() {\n\n  return (\n    <div>\n        <SearchCity />\n        <CityList />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport citySlice from './citySlice';\r\n\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        city: citySlice,\r\n    },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport store from './store/index';\nimport { Provider } from 'react-redux';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n       <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}