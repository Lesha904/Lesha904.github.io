{"version":3,"sources":["Cart.js","Goods.js","App.js","reportWebVitals.js","index.js"],"names":["Cart","renderObj","out","key","props","cart","goods","getGoodsFromArr","console","log","push","art","i","length","className","this","React","Component","Goods","src","image","alt","title","cost","data-key","articul","App","addToCart","event","preventDefault","target","classList","contains","cartTemp","state","dataset","setState","count","showCart","goodsArr","onClick","map","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OA4CeA,E,4MAxCXC,UAAY,WACR,IAAIC,EAAM,GACV,IAAK,IAAIC,KAAO,EAAKC,MAAMC,KAAM,CAC7B,IAAIC,EAAQ,EAAKC,gBAAgBJ,GACjCK,QAAQC,IAAIH,GACZJ,EAAIQ,KACJ,+BACI,6BAAKJ,EAAK,QACV,6BAAK,EAAKF,MAAMC,KAAKF,KACrB,6BAAK,EAAKC,MAAMC,KAAKF,GAAKG,EAAK,SAH1BH,IAOb,OAAOD,G,EAGXK,gBAAkB,SAACI,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAKR,MAAME,MAAMO,OAAQD,IACzC,GAAID,IAAQ,EAAKP,MAAME,MAAMM,GAAjB,QACR,OAAO,EAAKR,MAAME,MAAMM,I,4CAKpC,WACI,OACI,mCACI,sBAAKE,UAAU,aAAf,UACI,4EACA,gCACG,kCACA,+BAAI,qCAAY,uCAAc,yCAC3BC,KAAKd,0B,GAlCZe,IAAMC,WCcVC,E,4JAbX,WACI,OACI,mCACA,sBAAKJ,UAAU,cAAf,UACI,qBAAKK,IAAKJ,KAAKX,MAAMgB,MAAOC,IAAI,KAChC,4BAAIN,KAAKX,MAAMkB,QACf,4BAAIP,KAAKX,MAAMmB,OACf,wBAAQT,UAAU,cAAcU,WAAUT,KAAKX,MAAMqB,QAArD,kC,GARIT,IAAMC,W,OCmDXS,E,kDA7CX,aAAe,IAAD,8BACV,gBAQJC,UAAY,SAACC,GAEX,GADAA,EAAMC,kBACDD,EAAME,OAAOC,UAAUC,SAAS,eAAgB,OAAO,EAC5D,IAAIC,EAAW,EAAKC,MAAM7B,KAC1BG,QAAQC,IAAImB,EAAME,OAAOK,QAAQhC,KACjC8B,EAASL,EAAME,OAAOK,QAAQhC,KAAO8B,EAASL,EAAME,OAAOK,QAAQhC,OAAS8B,EAASL,EAAME,OAAOK,QAAQhC,KAAO,EAEjHK,QAAQC,IAAIwB,GACZ,EAAKG,SAAS,CAAC/B,KAAO4B,IACtB,IAAII,EAAQ,EAAKH,MAAMG,MACvBA,IACA,EAAKD,SAAS,CAAC,MAAWC,KAjBtB,EAAKH,MAAQ,CACX7B,KAAO,GACPgC,MAAQ,GALF,E,0CAuBhB,WACE,IAAIC,EAOF,OALEA,EADqB,IAArBvB,KAAKmB,MAAMG,MACC,cAAC,EAAD,CAAMhC,KAAMU,KAAKmB,MAAM7B,KAAMC,MAAOiC,IAGrC,QAGT,mCACA,sBAAKzB,UAAU,YAAf,UACI,sCACA,sBAAKA,UAAU,cAAc0B,QAASzB,KAAKY,UAA3C,UACCY,EAASE,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,CAAOpB,MAAOoB,EAAKpB,MAAOC,KAAMmB,EAAKnB,KAAMH,MAAOsB,EAAKtB,MAAOK,QAASiB,EAAKjB,SAAciB,EAAKjB,YADrH,SAGCa,W,GAvCGtB,IAAMC,WCKT0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.106a3c4e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Cart extends React.Component {\r\n\r\n    renderObj = () => {\r\n        let out = [];\r\n        for (let key in this.props.cart) {    // т.е. перебираеться выбранный элемент товара из корзины cart\r\n            let goods = this.getGoodsFromArr(key);// key у нас сам объект (он же  выбранный элемент товара) в корзине\r\n            console.log(goods);\r\n            out.push(\r\n            <tr key={key}>\r\n                <td>{goods['title']}</td>\r\n                <td>{this.props.cart[key]}</td>\r\n                <td>{this.props.cart[key]*goods['cost']}</td>\r\n            </tr>\r\n            );\r\n        }\r\n        return out;\r\n    } \r\n                 // Его задача - перебирать массив до совпадения артикулов и возвращать найденный товар.\r\n    getGoodsFromArr = (art) => {      \r\n        for (let i = 0; i < this.props.goods.length; i++) {\r\n            if (art === this.props.goods[i]['articul']){\r\n                return this.props.goods[i];             \r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"cart-field\">\r\n                    <h1>Корзина</h1>\r\n                    <table>\r\n                       <tbody>\r\n                       <tr><th>Art</th><th>Count</th><th>Cost</th></tr>        \r\n                        { this.renderObj() }\r\n                       </tbody>\r\n                    </table>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default Cart;\r\n\r\n// Я:\r\n// 1. Мне не понятно что такое key  в методе this.getGoodsFromArr(key);                                                                                                                                                       \r\n// 2. Не понятно что подставляем под параметром   art  в  методе  getGoodsFromArr = (art) => {   .\r\n// Этот метод, Вы написали, что он позволяет вытянуть из массива товаров - описание одного товара,. Но какого \r\n// товара, я не пойму?\r\n// 3. ЧТо значит \"и здесь его получаем по артикулу.\" в комментарии  let goods = this.getGoodsFromArr(key) - \r\n// поэтому мы создаем дополнительный метод, который позволяет вытянуть из массива товаров - описание одного товара,\r\n// и здесь его получаем по артикулу. ?                                                                                                                                                                                              \r\n// 4. Что мы положили в Переменную goods ? \r\n// 5.  Не доконца понимаю, что мы пушаем в переменную out этим кодом ?\r\n// <tr key={key}></tr>                                  \r\n//     <td>{goods['title']}</td>\r\n//     <td>{this.props.cart[key]}</td>\r\n//     <td>{this.props.cart[key]*goods['cost']}</td>\r\n// </tr>    \r\n// ТО что это еще одна строка, я понял, в которой будут постоянно обновляющиеся данные.  Но все эти cart[key]}\r\n//  goods['cost']}   не понимаю((\r\n// 6. Не понимаю что мы в цикле проверяем данной проверкой?                                                                                                                                                                      \r\n// if (art === this.props.goods[i]['articul']){\r\n//    return this.props.goods[i];\r\n// }  \r\n// Помогите пожалуйста в это разобраться. С предыдущими хоть как-то я разобрался, но с 10 и по12 просто не понимаю\r\n\r\n// Учитель: 1 Вопрос  this.getGoodsFromArr(key) . Вывел скрин, на котором изображено: 284s : 1 и обведено\r\n// красным кругом чтобы показать, что это cart (наш объект)\r\n// Я: Получаеться что key у нас сам объект (он же  выбранный элемент товара) в корзине, да?\r\n// Учитель: да.\r\n// Учитель:\r\n// Проблема в том, что в корзине лежит артикул и количество. А мы хотим вывести и название и картиночку и все \r\n// остальное - в корзине разумеется. Что делать? \r\n// У нас есть массив goods где товары сложены с описанием. Вот мы запускаем функцию \r\n// let goods = this.getGoodsFromArr(key);\r\n// которая перебирает массив товаров и если находит совпадение по артикулу - возвращает данный товар в переменную\r\n//  goods. И мы может теперь его вывести\r\n// Учитель:\r\n// Почему для получения товара по артикулу понадобилась такая сложность? Потому что нам в реакте удобнее\r\n// манипулировать массивами вида\r\n// [\r\n//    {\r\n//        \"articul\": \"284s\",\r\n//        \"title\": \"Apple\",\r\n//        \"cost\": 70,\r\n//    },\r\n//  \r\n// а не \r\n// {\r\n//     284s : {\r\n//         \"articul\": \"284s\",\r\n//         \"title\": \"Apple\",\r\n//         \"cost\": 70,\r\n//     },\r\n\r\n// Т.е. у нас массив а не объект. Поэтому мы не можем сразу к товару обратиться, приходиться циклом перебирать \r\n// и искать совпадение articul\r\n// Я: \r\n// А эот этот массив goods он же у нас массив goodsArr, да?\r\n// Учитель: да, но мы его в ShowCart передаем как goods   в строке \r\n//  showCart =  <Cart cart={this.state.cart} goods={goodsArr}/>;\r\n\r\n// Я: А вот здесь в коде getGoodsFromArr = (art) => {      \r\n//    for (let i = 0; i < this.props.goods.length; i++) {\r\n//        if (art === this.props.goods[i]['articul']){\r\n//            return this.props.goods[i];\r\n//        }\r\n//    }\r\n// } \r\n// goods[i]['articul'] - это искать каждый элемент массива goods и в каждом элементе искать 'articul', правильно?\r\n// А что мы подразумеваем под параметром art, который затем проверяем на строгое равенство?\r\n// Учитель: да правильно.  art это имя аргумента который мы передаем в функцию.\r\n// Я:\r\n// Вот получается метод(функция)  getGoodsFromArr = (art) => {  запускает цикл, Этот цикл пробегаеться по всему\r\n//  массиву с целью  обнаружить элемент массива с ключем articul' и если такое совпадение найдено, то вернуть \r\n// сам элемент массива, с которым мы будем работать далее. Но я в тол не могу взять, совпадение должно \r\n// быть с art, который у нас имя аргумента который мы передаем в функцию. И вопрос: что за аргумент, откуда он\r\n//  береться?\r\n// Учитель: \r\n// и мы вернулись к началу. Аргумент берется отсюда\r\n// let goods = this.getGoodsFromArr(key);\r\n// где key это ключи из объекта - корзины, ключи - это артикулы товара\r\n// Я:\r\n// я кажись понял) Смотрите, в этом коде this.getGoodsFromArr(); содержится выбранный элемент товара, \r\n// который(этот товар) мы получили с помощью строки return this.props.goods[i]; в методе \r\n// getGoodsFromArr = (art) => {  . И так как все  эти слова  \"articul\":    \"title\":    \"cost\":     \"image\":   \r\n// являються ключами (т.к. они находяться в объекте . А этот объект есть элемент массива) , то прописывая \r\n// внутрь строки   this.getGoodsFromArr(key)  параметр(он же у нас аргумент  - слова синонимы) key, я должен \r\n// подразумевать что я имею доступ ко всем этим четырем ключам-словам  \"articul\":    \"title\":    \"cost\":   \r\n//  \"image\":   в которых соответственно содержаться нужные нам значения , и затем мы вынимаем из каждого \r\n// key нужные нам данные и подставляем их в верстку строки корзины.  Вот в эту <tr key={key}>\r\n// <td>{goods['title']}</td>\r\n// <td>{this.props.cart[key]}</td>\r\n// <td>{this.props.cart[key]*goods['cost']}</td>\r\n// </tr>                                                                                                                                                                                                                                                                                      \r\n// Я все правильно понял?\r\n// Учитель: да\r\n// Я: Только я одного не понимаю в верстке этой строки: вот сюда я передаю пропс {key}, а  key его \r\n// имя  <tr key={key}>?   И вот здесь <td>{this.props.cart[key]}</td>  тоже не совсем понимаю. \r\n// Вот этим   this.props.cart   я получил state cart, который имеет значение объекта, а вот [key] это \r\n// типо   Count   на странице, но как-то размыто получаем. Что это ?\r\n// Учитель:\r\n// let obj = {\r\n// 'pp33' : 'ivanov',\r\n// 'dd99' : 'sydorov'\r\n// }\r\n// for (let key in obj) {\r\n//    хочу вывести номер key\r\n//    хочу вывести фамилию obj[key] \r\n// чистейший js\r\n","import React from 'react';\r\n\r\nclass Goods extends React.Component {\r\n    render() {\r\n        return (\r\n            <>\r\n            <div className=\"goods-block\">\r\n                <img src={this.props.image} alt=\"\"/>\r\n                <p>{this.props.title}</p>\r\n                <p>{this.props.cost}</p>\r\n                <button className=\"add-to-cart\" data-key={this.props.articul}>Add to cart</button>\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default Goods;","import './App.css';\nimport React from 'react';\nimport Cart from './Cart';\nimport Goods from './Goods';\nimport goodsArr from './goods.json'\n\n\nclass App extends React.Component {\n    constructor() {\n        super();\n          // state объявляется здесь\n          this.state = {            // учитель подкорректировал\n            cart : {},             // 1-ый state  Первый определяет сам объект корзины\n            count : 0               // 2-ой state  Второй определяет счетчик товаров.\n        }\n    }\n\n    addToCart = (event) => {\n      event.preventDefault(); \n      if (!event.target.classList.contains('add-to-cart')) return false;\n      let cartTemp = this.state.cart;\n      console.log(event.target.dataset.key);   // внесение учителя для самопроверки\n      cartTemp[event.target.dataset.key] ? cartTemp[event.target.dataset.key]++ : cartTemp[event.target.dataset.key] = 1;\n      // cartTemp++;\n      console.log(cartTemp);         // внесение учителя для самопроверки\n      this.setState({cart : cartTemp});\n      let count = this.state.count; \n      count++;\n      this.setState({'count' :  count})\n    }\n\n  render() {\n    let showCart;\n    if (this.state.count !== 0) {\n        showCart =  <Cart cart={this.state.cart} goods={goodsArr}/>;\n    }\n    else {\n        showCart = 'Empty';\n    }\n      return (\n          <>\n          <div className=\"container\">\n              <h1>Cart</h1>\n              <div className=\"goods-field\" onClick={this.addToCart}>\n              {goodsArr.map(item => <Goods title={item.title} cost={item.cost} image={item.image} articul={item.articul} key={item.articul}/>)}   {/* Выводим товар */}\n              </div> \n              {showCart}\n          </div>\n          </>\n      )\n  }\n}\n\nexport default App;\n\n// Учитель:\n// Основная проблема - вы использовали обычную функцию для метода. Запомните, если вы хотите использовать this \n// внутри классового компонента - то применяйте в методах стрелочные фукнции.","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}