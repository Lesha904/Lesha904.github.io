{"version":3,"sources":["components/Pagination2.js","components/Loader.js","components/AddComponent.js","components/Comp.js","App.js","reportWebVitals.js","index.js"],"names":["Pagination2","currentPage","totalPages","onChangePaginationPage","pages","i","push","className","map","onClick","Loader","AddComponent","showCommentHandler","useState","name","setName","text","setText","htmlFor","type","id","value","placeholder","onChange","e","target","rows","fetch","method","body","JSON","stringify","headers","then","disabled","Comp","messages","updateMessages","setCurrentPage","setTotalPages","loader","loaderHandler","showAddComment","useEffect","response","json","result","console","log","data","total","per_page","Math","ceil","item","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5576cd0.chunk.js","sourcesContent":["import React from 'react';\r\n// Комп. Pagination2 отвечает за отрисовку кнопок на странице Или за механизм по нажатию этих кнопок  ???\r\nconst Pagination2 = ({ currentPage, totalPages, onChangePaginationPage }) => {\r\n    const pages = [];\r\n\r\n    for(let i = 1; i <= totalPages; i++) {   // totalPages это число страниц 77\r\n        pages.push(i)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"pagination-wrapper\"}>\r\n            {pages.map(i => (  // выражение реакта, котрое будет вычислятью  массив див элементов\r\n                <div \r\n                    key={i} \r\n                    className={currentPage === i ? 'pagination-item active-pagination-item' :  'pagination-item btn btn-outline-primary'}\r\n                    onClick={() => onChangePaginationPage(i)}  //  ??  только меняет в Comp currentPage\r\n                >\r\n                {i}\r\n                </div>))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pagination2;\r\n\r\n// тернарный оператор\r\n// если тек. стран. равняется текущему элементу, то выполниться спец стиль для выбранного элемента(он стран. пагинации)\r\n// i индекс отображается в div. Нажимая див буду вывзвать функцию onChangePaginationPage которая пришла от родителя\r\n//, а в родители используется в юсэффекте.","import React from 'react';\r\n\r\nconst Loader = () => (\r\n    <div className={'loader-wrapper'}>\r\n        <div className={'loader'}></div>   \r\n    </div>\r\n)\r\n\r\nexport default Loader;","import React, {useState, useEffect} from 'react';\r\n\r\n// Комп. AddComponent отвечает за вывод формы для ввода текста. И то что мы ввели, отправляем на сервер через метод POST\r\nfunction AddComponent({ showCommentHandler }) {  // принимаю метод в качестве пропса НО ЗАЧЕМ????\r\n    const [name, setName] = useState(\"\");\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const onChangeName = (e) => {\r\n        setName(e.target.value)\r\n    }\r\n\r\n    const onChangeText = (e) => {\r\n        setText(e.target.value)\r\n    }\r\n    \r\n    \r\n    const saveComment = () => {\r\n        fetch('https://jordan.ashton.fashion/api/goods/30/comments', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ name, text }),  // Значение, преобразуемое в строку JSON.\r\n            headers: {\r\n                \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"Access-Control-Request-Headers\": \"*\",\r\n                \"Access-Control-Request-Method\": \"*\"\r\n            }\r\n        })\r\n        .then(() => {  // потом когда отправил запрос на сервак и выполняется then. В него  \r\n            setName(''); /*  Нужно форму очистить */\r\n            setText('');  /* Нужно форму очистить */\r\n            showCommentHandler(false)   // ????  И прячу весь по-пап\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-wrapper\">\r\n            <div className={\"main-form\"}>\r\n                <div className=\"second_block\">\r\n                            <div className=\"form-row \">\r\n                                    <label htmlFor=\"name\" className=\"form-label\">Name</label>\r\n                                    <input \r\n                                        type=\"text\" \r\n                                        className=\"form-control\" \r\n                                        id=\"name\"\r\n                                        value={name} // Определяет значение элемента формы, которое будет отправлено на сервер\r\n                                        placeholder=\"Your name\"\r\n                                        onChange={onChangeName}\r\n                                    /> \r\n                            </div>\r\n                            <div className=\"form-row \">\r\n                                <label htmlFor=\"commet\" className=\"form-label\">Text</label>\r\n                                    <textarea  \r\n                                        className=\"form-control\" \r\n                                        rows=\"1\" \r\n                                        id=\"commet\" \r\n                                        value={text}\r\n                                        placeholder=\"Your comment\"\r\n                                        onChange={onChangeText}\r\n                                    ></textarea>\r\n                            </div>\r\n                    </div>\r\n                    <div className=\"thirt_block\">\r\n                        <button onClick={() => showCommentHandler(false)} className=\"btn btn-outline-primary \" type=\"button\">Cancel </button>\r\n                        <button onClick={saveComment}  className=\"btn btn-outline-primary \" type=\"button\" disabled={!name || !text}>Save </button>\r\n                    </div>  {/* ????  onClick={() => showCommentHandler(false)} */}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default AddComponent;\r\n\r\n// Кнопка Save не будет активна до тех пор, пока не будут заполнены оба поля. И мы это реализовали через disabled={!name || !text}>\r\n// Если disabled true, то кнопкк не нажмем, не сможем воспользоваться","import React, {useState, useEffect} from 'react';\r\nimport Pagination2 from './Pagination2';\r\nimport Loader from './Loader'\r\nimport AddComponent from './AddComponent';\r\n\r\n// Комп. Comp отвечает за отрисовку заголовка, полей формы, двух кнопок и колеса прокрутки\r\nfunction Comp() { \r\n\r\n    const [messages, updateMessages] = useState([]);  // находяться все наши 10   data: (10) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]\r\n    const [currentPage, setCurrentPage] = useState(1);  // делаем state для текущей страницы, которую нужно отображать\r\n    const [totalPages, setTotalPages] = useState(10);  // кол-во выводимых полей/элементов на экране, которые показываем на каждой странице.  Установил кол-во страниц !!!\r\n    const [loader, loaderHandler] = useState(true);   // state для загрузки. Показывать или не показывать большой сивол загрузки. По умолчанию его показывать \r\n    const [showAddComment, showCommentHandler] = useState(false); //  showAddComment становится true когда нажал кнопку Add comment \r\n\r\n\r\n    useEffect(() => {      // () => {  - это функция обработчик  Получаем наши элементы\r\n        loaderHandler(true);   // увижу крутящуюся загрузку на старте. Пока выполняется запрос, то происходит отображение большого сивола загрузки\r\n        fetch(`https://jordan.ashton.fashion/api/goods/30/comments?page=${currentPage}`)\r\n            .then(response => response.json())\r\n            .then(result => {  // джава-скриптовый  объект result\r\n                console.log('result ==>', result);\r\n                updateMessages(result.data);   // вызываем метод и в него добавляем результат пришедший из сервера. Данные попадут в messages тем самым мы сложили все данные в массив.\r\n\r\n                console.log(\"result.total ===>\",result.total); // 769\r\n                console.log(\"result.per_page ===>\", result.per_page); // 10\r\n                setTotalPages(Math.ceil(result.total / result.per_page)); // Делим общее кол-во страниц(769) на текущее кол-во на странице(10). И тем самым определяем сколько у нас будет кнопок страниц - 77. И забрасываем в totalPages\r\n                loaderHandler(false)  // ??отображение большого сивола загрузки прекратится, когда запрос получил ответ с сервера\r\n \r\n            });\r\n    }, [currentPage]);   // это Мас. завис. благодаря которому можно регулировать повторный вызов useEffect\r\n// Добавив [currentPage] тем самым useEffect отслеживает что происходит в Массиве зависимостей, в котором \r\n// находится переменная currentPage, и при изменении этой Переменной currentPage useEffect повторно вызывает сам себя.\r\n\r\n\r\n    return (\r\n        <div className={\"container\"}>\r\n            <h1 className=\"title\">Form for submitting comments with fields</h1>\r\n            <div className={\"messages-wrapper\"}>\r\n                {messages.map(item => {   // выводим текст из данных, полученные из запроса на сервер в блоки div, которые стилизовали в App.css\r\n                    return (<div key={item.id} className={'message'}>{item.text}</div>)\r\n                })}\r\n                \r\n            </div>\r\n            <div className={'buttons-wrapper'}>\r\n                <button type=\"button\" className=\"btn btn-outline-success\" onClick={()=>showCommentHandler(true)}>Add comment</button>  {/* Кликаю по кнопке и появляется форма */}\r\n                <button type=\"button\" className=\"btn btn-outline-success\" disabled={currentPage >= totalPages} onClick={()=> setCurrentPage(currentPage + 1)}>Show more</button>  \r\n            </div>\r\n            <Pagination2  // в комп. Pagination2 передаем props currentPage, totalPages, и (Зачем??) setCurrentPage как метод/функцию\r\n                currentPage={currentPage}\r\n                totalPages={totalPages}\r\n                onChangePaginationPage={setCurrentPage}  // Зачем передавать функцию-обработчик, вместо переменной-stata??? \r\n            />\r\n\r\n            {loader && (<Loader/>)}   {/* Это колесо загрузки Но все же что это? */} {/* Как логическое И Если левая ТРу, то вычилсяет правую часть. Т.е. показывает /диспеит комп. Loader. Если переменная  loader левая часть false, то в првавую не идет */}\r\n            {showAddComment && (<AddComponent  // в комп. AddComponent передаем props showCommentHandler\r\n                showCommentHandler={showCommentHandler}  // передали чтобы отключать показывание формы!!\r\n             // пока loader true, то мы подгружаем  комп. <Loader/> который у нас символ загрузки. А если loader false, то сивол исчезает. А зависит это все от отправляемого запроса на сервер. и пока запрос отправляеться, то у нас true и тем самым подгружается/отображается симовл загрузки\r\n             />)} \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Comp;\r\n\r\n// Атрибут disabled - Блокирует доступ и изменение поля формы. Заблокированное в поле значение не передается на сервер.\r\n// И получается, что блокирование функционала кнопки Show more происходит в тот момент, когда текущая страница\r\n// оказывается больше или равно общему числу страниц. Проще говоря, когда страница окажется последней, то кнопка\r\n// Show more перестанет работать.\r\n\r\n// Данная запись onClick={()=>showCommentHandler(true)} означает, что кликая по кнопке Add comment мы вызываем\r\n// метод/функцию showCommentHandler для обновления stata showAddComment в которую попадает значение true. Зачем?\r\n// Что мы этим добиваемся?\r\n\r\n// Кликая по кнопке Show more я вызываю функцию, которая вызывает метод setCurrentPage(), которая изменяет текущую\r\n// страницу и делает ей наращиваение.","import './App.css';\nimport React, {useState, useEffect} from 'react';\nimport Comp from './components/Comp';\n\n\nfunction App() {\n\n  return (\n      <div className=\"container1\"> \n        \n        <Comp />\n      </div>  \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}