{"version":3,"sources":["store/goodsSlice.js","components/Goods.js","store/cartSlice.js","containers/GoodsList.js","components/Cart.js","containers/CartList.js","App.js","reportWebVitals.js","store/index.js","index.js"],"names":["goodsSlice","createSlice","name","initialState","goods","goodsArr","reducers","actions","selectGoods","state","Goods","props","className","src","image","alt","title","cost","articul","cartSlice","value","increment","data","payload","undefined","minus","remove","selectCart","cart","GoodsList","useSelector","dispatch","useDispatch","onClick","event","preventDefault","t","target","console","log","getAttribute","classList","contains","map","item","Cart","goodsObj","arr_total","total","Object","keys","i","length","border","padding","margin","width","CartList","reduce","accum","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","goodsReducer","cartReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"4NAGaA,EAAaC,YAAY,CAClCC,KAAO,QACPC,aAAe,CACXC,MAAQC,GAEZC,SAAW,KAKR,YAAWN,EAAWO,SACtB,IAAMC,EAAc,SAAAC,GAAK,OAAIA,EAAML,MAAMA,OACjCJ,IAAf,Q,OCJeU,MAXf,SAAeC,GACX,OACI,sBAAKC,UAAU,cAAf,UACI,qBAAKC,IAAKF,EAAMG,MAAOC,IAAI,KAC3B,4BAAIJ,EAAMK,QACV,4BAAIL,EAAMM,OACV,wBAAQL,UAAU,cAAc,WAAUD,EAAMO,QAAhD,6BCJCC,EAAYlB,YAAY,CACjCC,KAAM,OACNC,aAAc,CACViB,MAAO,IAEXd,SAAU,CACNe,UAAW,SAACZ,EAAOa,GACf,IAAIJ,EAAUI,EAAKC,aACUC,IAAzBf,EAAMW,MAAMF,KAAwBT,EAAMW,MAAMF,GAAW,GAC/DT,EAAMW,MAAMF,MAGhBO,MAAO,SAAChB,EAAOa,GACX,IAAIJ,EAAUI,EAAKC,QACnBd,EAAMW,MAAMF,KACiB,IAAzBT,EAAMW,MAAMF,WAAuBT,EAAMW,MAAMF,IAGvDQ,OAAQ,SAACjB,EAAOa,GACZ,IAAIJ,EAAUI,EAAKC,eACZd,EAAMW,MAAMF,OAKxB,EAAqCC,EAAUZ,QAAvCc,EAAR,EAAQA,UAAWI,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,OACpBC,EAAa,SAAAlB,GAAK,OAAIA,EAAMmB,KAAKR,OAC/BD,IAAf,QCSeU,MAzBf,WACI,IAAMzB,EAAQ0B,YAAYtB,GACpBuB,EAAWC,cAYjB,OACI,mCACI,qBAAKpB,UAAU,cAAcqB,QAZlB,SAACC,GAChBA,EAAMC,iBACN,IAAIC,EAAIF,EAAMG,OAEd,GADAC,QAAQC,IAAI,cAAcH,EAAEI,aAAa,cACpCJ,EAAEK,UAAUC,SAAS,eAAgB,OAAO,EACjDX,EAASV,EAAUe,EAAEI,aAAa,eAO9B,SACKpC,EAAMuC,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,CAAO5B,MAAO4B,EAAK5B,MAAOC,KAAM2B,EAAK3B,KAAMH,MAAO8B,EAAK9B,MACtEI,QAAS0B,EAAK1B,SAAc0B,EAAK1B,iB,MCiCtC2B,MA9Df,SAAclC,GACV2B,QAAQC,IAAI5B,EAAMmC,UAClBR,QAAQC,IAAI5B,EAAMiB,MAClB,IAAImB,EACAC,EAAQ,EACZD,EAAYE,OAAOC,KAAKvC,EAAMiB,MAAMe,KAAI,SAAAC,GAAI,OAAIjC,EAAMmC,SAASF,GAAf,KAA+BjC,EAAMiB,KAAKgB,MAEtF,IAAK,IAAIO,EAAI,EAAGA,EAAIJ,EAAUK,OAAQD,IACnCH,GAASD,EAAUI,GAW1B,OAFAb,QAAQC,IAAK,gBAAiBS,GAG1B,qBAAKpC,UAAU,aAAf,SAEI,wBAAOyC,OAAO,IAAIC,QAAS,OAAOC,OAAO,OAAzC,UACI,gCACI,+BACI,kFACA,0DACA,iEACA,wFACA,oGACA,uHACA,iFAGR,gCACCN,OAAOC,KAAKvC,EAAMiB,MAAMe,KAAI,SAAAC,GAAI,OACjC,oCACI,6BAAKjC,EAAMmC,SAASF,GAAf,QACL,+BAAKjC,EAAMmC,SAASF,GAAf,KAAL,0BACA,6BAAKjC,EAAMiB,KAAKgB,KAChB,+BAAKjC,EAAMmC,SAASF,GAAf,KAA+BjC,EAAMiB,KAAKgB,GAA/C,0BAJJ,IAKI,6BAAI,qBAAK/B,IAAKF,EAAMmC,SAASF,GAAf,MAA+BY,MAAM,KAAMzC,IAAI,OAC7D,+BAAI,wBAAQH,UAAU,cAAc,WAAUD,EAAMmC,SAASF,GAAf,QAA1C,iBACJ,wBAAQhC,UAAU,gBAAgB,WAAUD,EAAMmC,SAASF,GAAf,QAA5C,oBACA,6BAAI,wBAAQhC,UAAU,cAAc,WAAUD,EAAMmC,SAASF,GAAf,QAA1C,8DARCA,EAAOjC,EAAMmC,SAASF,GAAf,YAahB,gCACA,+BACI,gGACA,+BAAKI,EAAL,qCCJLS,MArCf,WACI,IAAMrD,EAAQ0B,YAAYtB,GACpBoB,EAAOE,YAAYH,GACnBI,EAAWC,cAEXc,EAAW1C,EAAMsD,QAAO,SAACC,EAAOf,GAElC,OADAe,EAAMf,EAAI,SAAeA,EAClBe,IACR,IAkBH,OAjBArB,QAAQC,IAAK,uBAAyBO,GAkBlC,sBAAKlC,UAAU,aAAaqB,QAhBb,SAACC,GAChBA,EAAMC,iBACN,IAAIC,EAAIF,EAAMG,OAEd,OAAID,EAAEK,UAAUC,SAAS,eACzBX,EAASV,EAAUe,EAAEI,aAAa,cAE9BJ,EAAEK,UAAUC,SAAS,iBACzBX,EAASN,EAAMW,EAAEI,aAAa,cAE1BJ,EAAEK,UAAUC,SAAS,eACrBX,EAASL,EAAOU,EAAEI,aAAa,mBADnC,GAMA,cAII,cAAC,EAAD,CAAMM,SAAUA,EAAUlB,KAAMA,IAJpC,SC3BOgC,MAVf,WACE,OACE,gCAEE,cAAC,EAAD,IACA,cAAC,EAAD,QCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHCQ,cAAe,CAC1BC,QAAS,CACLnE,MAAOoE,EACP5C,KAAM6C,KCIdC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BlB,K","file":"static/js/main.42e3c166.chunk.js","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\r\nimport goodsArr from '../data/goods.json';\r\n\r\nexport const goodsSlice = createSlice({\r\n    name : 'goods',\r\n    initialState : {\r\n        goods : goodsArr\r\n    },\r\n    reducers : {\r\n\r\n    }\r\n});\r\n\r\nexport const {} = goodsSlice.actions;\r\nexport const selectGoods = state => state.goods.goods;\r\nexport default goodsSlice.reducer;","function Goods(props) {\r\n    return (\r\n        <div className=\"goods-block\">\r\n            <img src={props.image} alt=\"\" />\r\n            <p>{props.title}</p>\r\n            <p>{props.cost}</p>\r\n            <button className=\"add-to-cart\" data-key={props.articul}>Add to cart</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Goods;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState: {\r\n        value: {}     // это пустая корзина    // хранятся данные о карте, той, которую пользователь добавил\r\n    },\r\n    reducers: {\r\n        increment: (state, data) => { \r\n            let articul = data.payload;  // получаем ключи через payload - \"258s\" и \"778d\" - знание которых дает возможность получить данные!!\r\n            if (state.value[articul] === undefined) state.value[articul] = 0;  // делается проверка наличия товара в корзине\r\n            state.value[articul]++;    // увеличиваю кол-во товара на 1\r\n        },\r\n\r\n        minus: (state, data) => {\r\n            let articul = data.payload;\r\n            state.value[articul]--;\r\n            if (state.value[articul] === 0) delete state.value[articul];\r\n        },\r\n\r\n        remove: (state, data) => {             // внесены изменения  учителем\r\n            let articul = data.payload;\r\n            delete state.value[articul];\r\n          }\r\n    }\r\n});\r\n\r\nexport const { increment, minus, remove } = cartSlice.actions;     // внесены изменения учителем\r\nexport const selectCart = state => state.cart.value; \r\nexport default cartSlice.reducer;\r\n\r\n// в reducers: мы получаем данные которые будем изменять","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n    selectGoods\r\n} from '../store/goodsSlice';\r\n\r\nimport Goods from '../components/Goods';\r\nimport { increment } from '../store/cartSlice';\r\n\r\n/**\r\n * get data from store\r\n * list data\r\n */\r\nfunction GoodsList() {\r\n    const goods = useSelector(selectGoods);\r\n    const dispatch = useDispatch();\r\n\r\n    let clickHandler = (event) => {\r\n        event.preventDefault();\r\n        let t = event.target;         // получаю в П. t тот элемент, на котором произошло событие\r\n        console.log(\"goodsList: \"+t.getAttribute('data-key'));   \r\n        if (!t.classList.contains('add-to-cart')) return true;   // если элемент на котором кликнули, не содержит класс add-to-cart(им мы пометили нашу кнопку), то ничего не будет происходить\r\n        dispatch(increment(t.getAttribute('data-key')));  // через dispatch передаю в экшн-increment нужные данные. Они попадают в параметр data\r\n    }   // Передаю параметры increment(у) в виде передачи атрибутов (которые я получаю с помощью метода \r\n    // getAttribute('data-key')), так как именно этот атрибут отвечает за articul выбранного товара по событию клик. \r\n    // Наличие этого articul дает понимание системе, какой именно товар выводить в корзину !!!\r\n\r\n    return (\r\n        <>\r\n            <div className=\"goods-field\" onClick={clickHandler}>\r\n                {goods.map(item => <Goods title={item.title} cost={item.cost} image={item.image}\r\n                    articul={item.articul} key={item.articul} />)}\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default GoodsList;","import './Cart.css';\r\n\r\nfunction Cart(props) {\r\n    console.log(props.goodsObj);  // Object   // вид объекта {284s: {…}, 778d: {…}}\r\n    console.log(props.cart );  // Object\r\n    let arr_total = [];\r\n    let total = 0;\r\n    arr_total = Object.keys(props.cart).map(item => props.goodsObj[item]['cost'] * props.cart[item]);  /* цена умножается на кол-во */\r\n\r\n        for (let i = 0; i < arr_total.length; i++){\r\n           total += arr_total[i]\r\n           /* total = total + arr_total[i]  аналогия с 11 строкой */   // При первом общитывании СТОИМОСТИ, которая в результате операции\r\n        }  // на 8 строке дало нам 45. И теперь на место total(которое на старте равно 0, для отсчета/старта) попадает 0\r\n        // , а на место arr_total[i] - который итог вычислений при первом увеличении товара, который был выбран и добавлен в корзину\r\n        // попадает 45 и все это присваиваеться в total. Добавляя второй раз выбранный товар в корзину, то уже \r\n        // на месте total стоять будет 45 и + 45(которое будет в любом случае таквым оставаться) которое на месте \r\n        // arr_total[i] и в результате станет 90, которое запишеться в total. И так далее при каждом добавлении или \r\n        // удалении одной единицы товара. Ведь в этой переменной хранится общая стоимость всех выбранных товаров.\r\n\r\n    console.log( \"total=======>\", total);\r\n\r\n    return (\r\n        <div className=\"cart-block\">\r\n\r\n            <table border=\"1\" padding =\"10px\" margin=\"auto\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Название</th>\r\n                        <th>Цена</th>\r\n                        <th>Кол-во</th>\r\n                        <th>Стоимость</th>\r\n                        <th>Изображение</th>\r\n                        <th>Добавить/Убрать</th>\r\n                        <th>Удалить</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {Object.keys(props.cart).map(item => \r\n                <tr key={item + props.goodsObj[item]['title']}>  {/* делаем строку, а у уроке делали элемент списка */}\r\n                    <td>{props.goodsObj[item]['title']}</td>\r\n                    <td>{props.goodsObj[item]['cost']} руб.</td>\r\n                    <td>{props.cart[item]}</td> \r\n                    <td>{props.goodsObj[item]['cost'] * props.cart[item]} руб.</td> {/*  цена умножается на кол-во */}\r\n                    <td><img src={props.goodsObj[item]['image']} width=\"40\"  alt=\"\" /></td>\r\n                    <td><button className=\"add-to-cart\" data-key={props.goodsObj[item]['articul']}> + </button>\r\n                    <button className=\"sub-from-cart\" data-key={props.goodsObj[item]['articul']}> - </button></td>\r\n                    <td><button className=\"delete-cart\" data-key={props.goodsObj[item]['articul']}> удалить </button></td>\r\n                </tr> \r\n                )}\r\n                </tbody>\r\n                \r\n                <tfoot>\r\n                <tr>\r\n                    <td>Общая сумма:</td>\r\n                    <td>{total} руб.</td>\r\n                </tr>\r\n                </tfoot>\r\n        \r\n                \r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cart;\r\n\r\n// Что он такое делает что мы его используем? Речь о методах\r\n\r\n// console.log(props.goodsObj);  Object который содержит ниже написанное\r\n// 284s: {articul: \"284s\", title: \"Apple\", cost: 70, image: \"https://cdn0.iconfinder.com/data/icons/fruity-3/512/Apple-64.png\"}\r\n// 778d: {articul: \"778d\", title: \"Lemon\", cost: 45, image: \"https://cdn0.\r\n\r\n// data-key позволяет понять артикул товара, котрый был выбран/нажат. Но на кнопках в комп. Cart мы вешаем и для того,\r\n// чтобы увеличивать выбранный ранее по кнопке карточки-товара кол-во добавленного в корзину товара, или уменьшить\r\n// его или вообще удалить. ","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n    selectGoods\r\n} from '../store/goodsSlice';\r\n\r\nimport {\r\n    selectCart\r\n} from '../store/cartSlice';\r\n\r\nimport Cart from '../components/Cart';\r\nimport {increment, minus, remove} from '../store/cartSlice'; // Обязательно импортируем редъюсеры/акшины, чтобы ими воспользоваться и с их помощью передать обратно в описание хранилища новые данные, полученные в ходе вычислений по клику в комп. CartList\r\n\r\nfunction CartList() {\r\n    const goods = useSelector(selectGoods);  // получаю данные в виде массива объектов из goodsSlice (получаю товар, которй выглядит в виде массива объектов)\r\n    const cart = useSelector(selectCart);    // получаю данные из cartSlice (получаю корзину)\r\n    const dispatch = useDispatch();\r\n    // переиндексирую массив товара\r\n    const goodsObj = goods.reduce((accum, item) => { // В Переменной goodsObj храниться переиндексация массива объектов из goodsSlice, которые мы засунули в П. goods\r\n        accum[item['articul']] = item;\r\n        return accum;\r\n    }, {});  // сделали стартовое значение. Т.е. будет объект(ассоциативынй массив) с ключами \"258s\" и \"778d\" \r\n    console.log( \"goodsObj===========>\",  goodsObj);  // вид объекта {284s: {…}, 778d: {…}}\r\n\r\n    let clickHandler = (event) => {\r\n        event.preventDefault();\r\n        let t = event.target;       // Это дает нам понять, на каком товаре сделали клик \r\n        //  \r\n        if (t.classList.contains('add-to-cart')) return ( // делаем проверку, есть ли у элемента класс add-to-cart. И если он есть, то я могу что-то сделать\r\n        dispatch(increment(t.getAttribute('data-key')))  // передаю через dispatch в action(increment) нужные данные\r\n        );\r\n        if (t.classList.contains('sub-from-cart')) return (   // ДЕЛАЕМ ПРОВЕРКУ НА КНОПКЕ, КОТОРАЯ УЖЕ В ЯЧЕЙКЕ НАХОДИТЬСЯ\r\n        dispatch(minus(t.getAttribute('data-key')))\r\n        );\r\n        if (t.classList.contains('delete-cart')) return (\r\n            dispatch(remove(t.getAttribute('data-key')))\r\n            );\r\n    }\r\n\r\n    return (\r\n        <div className=\"cart-field\" onClick={clickHandler}>\r\n            {/* <ul>\r\n                {Object.keys(cart).map(item => <li key={item + goodsObj[item]['title']}>{goodsObj[item]['title']} - {cart[item]}</li>)}\r\n            </ul> */} {/* Выводим список */}\r\n            <Cart goodsObj={goodsObj} cart={cart}/>  {/* Выводим таблицу */}\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CartList;","import GoodsList from './containers/GoodsList';\nimport CartList from './containers/CartList';\n\nfunction App() {\n  return (\n    <div>\n      {/* Вывод данных из хранилища */}\n      <GoodsList />\n      <CartList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport goodsReducer from './goodsSlice';\r\nimport cartReducer from './cartSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        goods: goodsReducer,\r\n        cart: cartReducer\r\n    },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n/**\n *  redux\n */\nimport store from './store/index';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}