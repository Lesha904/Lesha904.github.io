{"version":3,"sources":["containers/AddUser.js","action/index.js","components/List.js","containers/UserList.js","components/App.js","store/initialState.js","reducers/users.js","reducers/index.js","index.js"],"names":["AddUser","dispatch","useDispatch","onSubmit","event","preventDefault","console","log","target","elements","passport","name","age","data","value","type","defaultValue","List","goods","users","map","item","connect","state","App","UserList","initialState","action","combineReducers","store","createStore","rootReducer","render","StrictMode","document","getElementById"],"mappings":"mJA0BeA,EAtBC,WACZ,IAAMC,EAAWC,cASjB,OACI,8BACI,uBAAMC,SATM,SAACC,GACjBA,EAAMC,iBACNC,QAAQC,IAAIH,EAAMI,OAAOC,UACzB,ICVoBC,EAAUC,EAAMC,EDUhCC,EAAOT,EAAMI,OAAOC,SACxBR,GCXoBS,EDWCG,EAAKH,SAASI,MCXLH,EDWYE,EAAKF,KAAKG,MCXhBF,EDWuBC,EAAKD,IAAIE,MCXvB,CACjDC,KAAM,WACNL,WACAC,OACAC,UDYQ,UACI,uBAAOG,KAAK,OAAOJ,KAAK,WAAWK,aAAa,UAChD,uBAAOD,KAAK,OAAOJ,KAAK,OAAOK,aAAa,cAC5C,uBAAOD,KAAK,OAAOJ,KAAK,MAAMK,aAAa,8EAC3C,wBAAQD,KAAK,SAAb,2BEHDE,MAjBf,SAAeC,GAOX,OANAZ,QAAQC,IAAI,oBACZD,QAAQC,IAAIW,GAEZZ,QAAQC,IAAIW,EAAMC,OAClBb,QAAQC,IAAI,oBAGR,8BACI,6BACKW,EAAMC,MAAMC,KAAK,SAAAC,GAAI,OAAG,+BAAyBA,EAAKV,KAAMU,EAAKT,MAAhCS,EAAKX,kBCYxCY,mBAPf,SAAyBC,GAErB,MAAO,CAAEJ,MADSI,EAAVJ,SAQR,KAFWG,CAGbL,GCbaO,EAPH,kBACV,gCACE,cAAC,EAAD,IACA,cAACC,EAAD,Q,OCEWC,EAVM,CACjBP,MAAO,CACH,CACIT,SAAU,YACVC,KAAM,OACNC,IAAK,Q,OCcFO,EAlBD,WAAyB,IAAxBI,EAAuB,uDAAf,GAAII,EAAW,uCAClC,OAAQA,EAAOZ,MACX,IAAK,WAGD,OAFAT,QAAQC,IAAI,mBACZD,QAAQC,IAAIgB,GACN,GAAN,mBACOA,GADP,CAEI,CACIb,SAAUiB,EAAOjB,SACjBC,KAAMgB,EAAOhB,KACbC,IAAMe,EAAOf,OAGzB,QACI,OAAOW,ICVJK,cAAgB,CAE3BT,UCEEU,EAAQC,YAAYC,EAAaL,GAEvCM,iBACE,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJK,SAASC,eAAe,W","file":"static/js/main.e9d1caee.chunk.js","sourcesContent":["import React from 'react';       // когда создаем новый компонент, то обязаны прописать все слева от комментария\r\nimport { useDispatch } from 'react-redux';\r\nimport { addNewUsers } from '../action';\r\n\r\nconst AddUser = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const formHandler = (event) => {\r\n        event.preventDefault();\r\n        console.log(event.target.elements);\r\n        let data = event.target.elements;\r\n        dispatch(addNewUsers(data.passport.value, data.name.value, data.age.value));  //  отправляет данные с помощью dispatch на диспетчеризацию - это некий процесс, в котором что-то происходит. Это некий action(экшн) с полученными данными\r\n    }  // мы передали данные в экшн, в котором они пройдут определенную проверку, и если все гуд, то будут переданы данные в dispatch, который будет изменять состояние хранилища\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={formHandler}>\r\n                <input type='text' name=\"passport\" defaultValue=\"3jf8f\" />\r\n                <input type='text' name=\"name\" defaultValue=\"new goods\" />\r\n                <input type='text' name=\"age\" defaultValue=\"https://i8.rozetka.ua/goods/20227720/jogway_tj532c_images_20227720511.jpg\" />\r\n                <button type=\"submit\">Add New</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddUser;","export const addNewUsers = (passport, name, age) => ({   //  вместо return мы пишем ()\r\n    type: 'ADD_USER',     // указываю тип действия  !!!!!!!! По нему мы будем фильтровать получаемые данные\r\n    passport,          // переданные данные, которые указывают на то, что я буду посылать в dispatch после проверки\r\n    name,\r\n    age\r\n});\r\n\r\n/*  одинаковая запись \r\nexport const addNewUsers = (passport, name, age) => {\r\n    return {\r\n        type: 'ADD_USER',                // указываю тип действия\r\n        passport: passport,              // переданные данные, которые указывают на то, что я буду посылать\r\n        name: name,\r\n        age: age\r\n    }\r\n};\r\n*/\r\n\r\n// ЭТО ВСЕ ПЕРВАЯ ЧАСТЬ НАШЕГО ЭКШЕНА(ACTION)","function List (goods) {\r\n    console.log('================');\r\n    console.log(goods);\r\n\r\n    console.log(goods.users);\r\n    console.log('================');\r\n\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {goods.users.map( item =><li key={item.passport}>{item.name}{item.age}</li> )}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default List;","import { connect } from \"react-redux\";\r\nimport List from '../components/List';\r\n\r\n/* const obj = {   // для примера, чтоб разобраться написал Андрюха\r\n    field1: 1,\r\n    field2: 2\r\n};\r\n\r\n//const { field1, field2, field3 = [] } = obj;\r\n\r\nconst field1 = obj.field1;\r\nconst field2 = obj.field2;\r\nconst field3 = obj.field3; // undefined\r\n */\r\n\r\nfunction mapStateToProps(state) { // state - это параметр, которым я передаю состояние моего хранилища. У меня это initialState\r\n    const { users } = state;      // деструкция  // присваивая state я тем самым передаю props компоненту List  // Я беру/получаю данные из редаксова стейта и передаю их реактовскому компоненту\r\n    return { users : users };     // отдаю объкт с полем users, куда присваиваю значение переменной users\r\n // return { users }; одинаково с вышестоящей строкой\r\n\r\n}\r\n// HOC high order component функция которая принимает функцию как аргумент\r\nexport default connect( // connect = соедини. А значит соедини данные с компонентом List\r\n    mapStateToProps,   // благодаря этой функции мы вытягиваем данные со стейта и передаем их(данные) как пропсы комп. List\r\n    null\r\n)(List);    // т.е. данные из хранилища будут переданы как пропсы компоненту List \r\n\r\n\r\n// Я: \r\n// А можете объяснить содержимое UserList.js? А именно в этом коде мне неясно что такое \r\n// const { users } = state; и еще строка  return { users : users }; ТОже самое я не понял в видео-уроке(                                                                                                                                                                                                                                                         import { connect } from \"react-redux\";\r\n// Учитель:\r\n// const { users } = state;\r\n// получаем в константу users часть store с таким именем\r\n// возвращаем его - пересылаем в list\r\n// Я:\r\n// users  - это у нас редьюсер, который изменяет состояние хранилища. Да?  Почему нужно брать users в фигурные\r\n// скобки?   2. И почему у нас стоит 2   - users : users  -и почему они тоже в фигурных скобках?\r\n// Учитель: \r\n// не совсем. Хранилище это объект с ключами/свойствами. Ключ/свойство users хранит данные о наших пользователях.\r\n// Вот мы и получаем его этот ключ, чтобы мы могли доступиться к нашим значениям - пользователям.\r\n// return { users : users };\r\n// потому что нам удобно возвращать объект - реакт его(этот объект) передаст как пропсы в List\r\n// ЛЕВАЯ часть это имя пропсов которые будут переданы, ПРАВАЯ - это значение\r\n// Я:\r\n// А я правильно понимаю, что на месте { users } в строке const { users } = state;  может быть любое название?\r\n// К примеру const { people } = state; ?\r\n// Учитель:\r\n// нет. У вас в store ключ users\r\n// Я: \r\n// Т.е. мы ключу users присваиваем state.  А что мы себе этим обеспечиваем,   текущее состояние нашего хранилища?\r\n// Учитель: https://codepen.io/Asmodey/pen/mdmVRYr?editors=1111\r\n// деструкция\r\n// Я: \r\n// let obj = {\r\n//  hello : 44,\r\n//  prime : 6,\r\n//  goro : 12\r\n//}\r\n\r\n// let {goro} = obj;\r\n// console.log(goro);\r\n// Вывело 12   .   Получаеться логика такая, что чтобы нам получить значение элемента/свойства/ключа объекта, нам нужно \r\n// прописать ключ в качестве имени Переменной и присвоим сам объект, значение из которого мы будем \r\n// вынимать. Так или что-то нето?  Просто меня настараживают фигурные скобки, которыми мы оборачивем \r\n// имя Переменной\r\n// Учитель: \r\n// все верно. По сути более замысловатый аналог этого \r\n// let goro = obj.goro","import React from 'react';\r\nimport AddUser from '../containers/AddUser';\r\nimport UserList from '../containers/UserList';\r\n\r\n\r\nconst App = () => (\r\n  <div>\r\n    <AddUser />\r\n    <UserList />\r\n  </div>\r\n)\r\n\r\nexport default App;","const initialState = {\r\n    users: [                        // название хранилища\r\n        {\r\n            passport: 'EH 883366',\r\n            name: 'Alex',\r\n            age: '24'\r\n        }\r\n    ]\r\n};\r\n\r\nexport default initialState;","// admin: change to userS\r\nconst users = (state = [], action) => {    // Передал параметр action т.к. знаю, что в нем содержиться инфа из ранее передаваемой инфы в сам экшн из компонента AddUser\r\n    switch (action.type) {                 // users - это наш редьюсер, в котором будет содержаться результат проверки, и его мы передадим в combineReducers\r\n        case 'ADD_USER' :                   // благодаря type мы подтягиваем те данные, которые были переданы в addNewUsers, которые в свою очерердь были получины из формы компонента AddUser\r\n            console.log('we add new user');\r\n            console.log(state);\r\n            return [   // возвращаем стэйт с внесенными в него данными в виде объекта\r\n                ...state,\r\n                {\r\n                    passport: action.passport,\r\n                    name: action.name,\r\n                    age : action.age,\r\n                }\r\n            ]\r\n        default:\r\n            return state;   // Если изменений не произошло, то вернули путой массив и для этого мы его указали в передаваемом параметре в виде state = []\r\n    }\r\n}\r\n// admin: change to userS\r\nexport default users;        // провтыкал название users и вместо него было user\r\n\r\n// ЭТО ВСЕ ВТОРАЯ ЧАСТЬ НАШЕГО ЭКШЕНА(ACTION). Здесь происходит фильтрация наших данных с помощью switch\r\n// !!!!!! БЛАГОДАРЯ ЭТОМУ ФАЙЛУ Я ПОЛУЧИЛ ФУНКЦИЮ REDUCER, КОТОРый ПОЗВОЛИТ ОБРАТИТЬСЯ К ХРАНИЛИЩУ И ИЗМЕНЯТЬ ЕГО ДАННЫЕ СВОИМИ, КОТОРЫЕ Я ПОЛУЧИЛ ИЗ ВВЕДЕННЫХ В ФОРМУ ДЫННЫХ","\r\nimport { combineReducers } from 'redux';\r\n// admin: change to userS\r\nimport users from './users';      // can be different name   // сперва подтягиваем данные из users чтобы мы погли их передать в combineReducers, который передаст эти данные в хранилище\r\n                                // сам же users это редьюсер, который выглядит под названием rootReducer, который и обеспечивает механизм обработки ДАННЫХ(которые мы заранее создали и передали) в виде их проверки\r\nexport default combineReducers({\r\n    //// admin: change to userS\r\n    users                 // сам же users это редьюсер, КОТОРый ПОЗВОЛИТ ОБРАТИТЬСЯ К ХРАНИЛИЩУ И ИЗМЕНЯТЬ ЕГО ДАННЫЕ СВОИМИ, КОТОРЫЕ Я ПОЛУЧИЛ ИЗ ВВЕДЕННЫХ В ФОРМУ ДЫННЫХ\r\n});\r\n","import React from 'react'\nimport { render } from 'react-dom'\nimport App from './components/App'\n\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport initialState from './store/initialState'\nimport rootReducer from './reducers';     // better name by filename  лучше именовать по имени файла, в котором он лежит. В моем случае rootReducer лучше именовать именем его пути т.е. reducers (это на будущее). Имя может быть любое.\n\nconst store = createStore(rootReducer, initialState);\n\nrender(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}