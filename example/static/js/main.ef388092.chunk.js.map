{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","st1","setSt1","st2","setSt2","st3","setSt3","st4","setSt4","st5","setSt5","st6","setSt6","st7","st8","setSt8","st9","setSt9","st10","setSt10","ref1","React","createRef","ref5","ref6","ref7","ref9","ref10","randomInt","a","b","Math","floor","random","ref","type","className","onClick","input1Value","current","value","masiv","onMouseEnter","countSt2","onInput","event","input3Value","target","countSt4","onChange","input5Value","checked","defaultValue","selectValue","color1","color2","color3","rgb","style","background","onKeyPress","isNaN","key","input9Value","input10Value","massiv","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef388092.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nimport { useState } from 'react';\n\n\nfunction App() {\n  const [st1, setSt1] = useState([]);\n  const [st2, setSt2] = useState(0);\n  const [st3, setSt3] = useState([]);\n  const [st4, setSt4] = useState(0);\n  const [st5, setSt5] = useState([]);\n  const [st6, setSt6] = useState([]);\n  const [st7, setSt7] = useState([]);\n  const [st8, setSt8] = useState('');\n  const [st9, setSt9] = useState('');\n  const [st10, setSt10] = useState('');\n  let ref1 = React.createRef();\n  let ref5 = React.createRef();\n  let ref6 = React.createRef();\n  let ref7 = React.createRef();\n  let ref9 = React.createRef();\n  let ref10 = React.createRef();\n\n\n\n  function task1() {\n    let input1Value = ref1.current.value;\n    let masiv = [...st1, input1Value];\n    setSt1(masiv);\n    ref1.current.value = '';\n  }\n\n  function task2() {\n    let countSt2 = st2;\n    countSt2++;\n    setSt2(countSt2);\n  }\n\n  function task3(event) {              // учитель подкорректировал и помог решить\n    /* console.log(event.target.value); */     // просто для проверки оставил\n    let input3Value = event.target.value;      // лежит послений символ. \n    /* let masiv3 = [...st3, input3Value]; */     // эта строка лишняя\n    setSt3(input3Value);\n  }\n\n  function task4() {\n    let countSt4 = st4;\n    countSt4++;\n    setSt4(countSt4);\n  }\n\n  function task5() {\n   /*  let input5Value = ref5.current.value;\n    if (input5Value.checked) {\n      input5Value = ref5.current.defaultValue;\n    }\n    else{\n      input5Value = 0;\n    };\n    setSt5(input5Value); */\n    let input5Value = ref5.current.value;      // учитель подкорректировал и помог решить\n    if (ref5.current.checked) {          // обращаемся к элементу и его свойству и проверяем что он выбран (галочку поставили)\n      setSt5(input5Value);\n    }\n    else{\n      setSt5(0);\n    };\n  }\n\n  function task6() {\n    let selectValue = ref6.current.value;\n    setSt6(selectValue);\n  }\n\n  function task7() {\n    const color1 = randomInt(0,255);\n    const color2 = randomInt(0,255);\n    const color3 = randomInt(0,255);\n    const rgb = `rgb(${color1},${color2},${color3})`;\n    ref7.current.style.background = rgb;\n  }\n  function randomInt (a, b) {\n    return Math.floor(Math.random() * (b - a + 1) + a);\n  }\n\n  function task8(event) {\n    if (!isNaN(+event.key)) {\n      setSt8(1)\n    }\n    else {\n      setSt8(0)\n    }\n  }\n\n  function task9() {\n    let input9Value = ref9.current.value;\n /*    console.log(input9Value); */   // для проверки\n    setSt9(input9Value);\n  }\n\n  function task10() {\n     let input10Value = ref10.current.value;\n     let massiv = [...st10, input10Value];\n     setSt10(massiv);\n     ref10.current.value = '';\n     console.log(massiv);\n  }\n\n  return (\n    <>\n      <h1>События</h1>\n      <section>\n        <h2>Task 1</h2>\n\t\t    <input  ref={ref1} type=\"text\"/>\n        <button className=\"task-1\" onClick={task1}>Push</button>\n        <div>{st1}</div>\n      </section>\n      <section>\n        <h2>Task 2</h2>\n        <div className=\"task-2\" onMouseEnter={task2}></div>\n        <div>{st2}</div>\n      </section>\n      <section>\n        <h2>Task 3</h2>\n        <input type=\"text\" onInput={task3} className=\"task-3\" />\n        <div>{st3}</div>\n      </section>\n      <section>\n        <h2>Task 4</h2>\n        <button className=\"task-4\" onClick={task4}>Count</button>\n        <div>{st4}</div>\n      </section>\n      <section>\n        <h2>Task 5</h2>\n        <input type=\"checkbox\" onChange={task5} ref={ref5} defaultValue=\"55\" />\n        <div>{st5}</div>\n      </section>\n      <section>\n        <h2>Task 6</h2>\n        <select className=\"task-6\" onChange={task6} ref={ref6}>\n          <option value=\"7\">seven</option>\n          <option value=\"4\">four</option>\n          <option value=\"9\">nine</option>\n          <option value=\"10\">ten</option>\n        </select>\n        <div>{st6}</div>\n      </section>\n      <section>\n        <h2>Task 7</h2>\n        <div className=\"block-7\" ref={ref7}></div>\n        <button className=\"task-7\" onClick={task7}>Color</button>\n        <div>{st7}</div>\n      </section>\n      <section>\n        <h2>Task 8</h2>\n        <input type=\"text\" className=\"task-8\" onKeyPress={task8}></input>\n        <div>{st8}</div>\n      </section>\n      <section>\n        <h2>Task 9</h2>\n        <input type=\"range\" className=\"task-9\" ref={ref9} onInput={task9}></input>\n        <div>{st9}</div>\n      </section>\n      <section>\n        <h2>Task 10</h2>\n        <input type=\"number\" className=\"i-10\" ref={ref10}></input>\n        <button className=\"task-10\" onClick={task10}>Push</button>\n        <div>{st10}</div>\n      </section>\n    </>\n  );\n}\n\nexport default App;\n\n// Task 3\n// Я: Я ввожу в инпут-поле 555, а выводит на экран 555555, почему так происходит?\n// Учитель: потому что у вас в input.target.value лежит все введенное, а не послений символ.  И это \n//    let masiv3 = [...st3, input3Value];\n//    не правильно. Вам просто нужно сделать \n//        setSt3(input3Value);\n\n// Task 5\n// Я: Вот этой строкой  let input5Value = ref5.current.value; я обращаюсь к элементу и получаю его значение. А дальше как?\n// Учитель: ref5.current.checked) { - обращаемся к элементу и его свойству, checked - проверяем выбран он или нет.\n// если выбран помещаем в state ваше значение  setSt5(input5Value);\n\n// Task 8\n// Я: Александр подскажите пожалуйста, что не так с моим методом setSt8, что в консоли мне высвечивает об ошибке \n// Invalid left-hand side in assignment expression?  Никак не пойму, я ведь применяю метод чтобы установить новое \n// значение\n// Учитель: setSt8(input8Value) = 1;\n// set это метод. Если вы хотите что-то присвоить в state то пишите\n// setSt8(то что вы хотите положить)\n// вот так  setSt8(input8Value) = 1; js делать не может\n// Я: Понял) Спасибо) Но а почему вывод 0 и 1 не адекватно срабытвает? Пишу 4а4а4а4а4а4а , к примеру, и 0 и  1 либо \n// запаздывает, либо и вовсе остаеться 1 или 0.\n// Учитель: ну совсем не интересно, чистый JS. \n// 1. Получать данные нужно не из value  -где вы всю строку получаете, а из event.\n// 2. Изначально в   const [st8, setSt8] = useState([]); положить не массив а строку   const [st8, setSt8] = useState('');\n// потом в task8 вначале получить строку в переменную. Потом  выполнить вашу проверку ( с ней ок) и долепить 0 или 1\n// в строку. Потом положить строку в state\n// Я: А как понимать, когда нужно строку укзывать, когда массив или еще что-нибудь в  useState([]);?\n// Учитель: смотрите что вы хотите получить по результату. По результату я вижу строку которую выведу. \n// Раз строку - то добавляем в state строку.\n\n\n// Я:\n// Александр, еще вопрос такой. А вот в этой строке  let comments = [...comment, commentValue];  \n// (это из видео-урока когда делали через функциональный подход )  вы говорили что создаем такой записью массив. \n// Мне не совсем понятно, По тому что это массив, нам должно быть понятно по квадратным скобкам, да?  \n// И почему мы указываем наш state в виде comment и текщее значение из поля тэга textarea ?      \n//     Получается что в Переменной comments содержится массив, состоящий из объекта и текущего значения. \n// Вот не освсем понятно как то, что в скобках увязывается, да еще и в массив. Разъясните пожалуйста?\n// Учитель:\n// [ ] массив\n// ...comment оператор spread который разбивает массив на элементы\n// commentValue - значение из input\n// как следствие мы получаем все элементы коммент и добавленное к ним новое значение commentValue\n// Я:\n// оператор spread - это троеточие (...)? а comment - это наш state(объект)? Т.е. если ... троеточие не поставить, \n// то в массиве будет один элемент, в который мы  все будем засовывать. А если поставим ... троеточие, то каждое \n// введенное нами значение в поле будет отдельным элементом массива, правильно? Я вот прочитал за это статью на \n// сайте https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Spread_syntax , но пока не понятно(\n// Учитель: \n// правильно.","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}